---
title: "Mini-Project #03: Visualizing NYC's Green Canopy"
author: "Matthew Rivera"
date: "2025-10-21"
format: 
  html:
    code-fold: false
    code-tools: true
    toc: true
    toc-depth: 3
---

## Introduction

New York City's urban forest represents a vital component of the city's infrastructure, with nearly 900,000 trees spanning over 500 species. The Department of Parks and Recreation maintains this extensive green canopy with an annual budget exceeding $675 million. This analysis explores the NYC TreeMap dataset to understand tree distribution across city council districts and proposes a targeted intervention program to enhance equitable access to the benefits of urban forestry.

## Setup

```{r setup, message=FALSE, warning=FALSE}
# Load required packages
library(tidyverse)
library(sf)
library(httr2)
library(jsonlite)
library(scales)
library(plotly)
library(gganimate)

# Create data directory
if (!dir.exists("data")) dir.create("data")
if (!dir.exists("data/mp03")) dir.create("data/mp03")
```

## Task 1: Download NYC Council District Boundaries

```{r task1-function}
download_council_districts <- function() {
  # Define paths
  data_dir <- "data/mp03"
  zip_file <- file.path(data_dir, "nycc_districts.zip")
  shp_dir <- file.path(data_dir, "nycc_districts")
  
  # URL for NYC Council Districts (2024 boundary data)
  url <- "https://data.cityofnewyork.us/api/geospatial/yusd-j4xi?method=export&format=Shapefile"
  
  # Download zip file only if needed
  if (!file.exists(zip_file)) {
    message("Downloading NYC Council District boundaries...")
    download.file(url, zip_file, mode = "wb")
    message("Download complete!")
  } else {
    message("Using cached district boundaries.")
  }
  
  # Unzip only if needed
  if (!dir.exists(shp_dir)) {
    message("Unzipping district boundaries...")
    unzip(zip_file, exdir = shp_dir)
  }
  
  # Find the .shp file
  shp_files <- list.files(shp_dir, pattern = "\\.shp$", full.names = TRUE)
  
  if (length(shp_files) == 0) {
    stop("No shapefile found in extracted data")
  }
  
  # Read shapefile
  districts <- st_read(shp_files[1], quiet = TRUE)
  
  # Transform to WGS84
  districts <- st_transform(districts, crs = "WGS84")
  
  # Simplify geometry for faster plotting (optional but recommended)
  districts <- districts |>
    mutate(geometry = st_simplify(geometry, dTolerance = 10))
  
  return(districts)
}

# Download and load districts
districts <- download_council_districts()

# Preview the data
head(districts)
```

## Task 2: Download Tree Points Data

```{r task2-function}
download_tree_points <- function(limit = 50000) {
  # Base URL for NYC Tree Points API
  base_url <- "https://data.cityofnewyork.us/resource/gsvc-e729.geojson"
  
  data_dir <- "data/mp03"
  offset <- 0
  batch <- 1
  all_files <- c()
  
  repeat {
    # Define file name for this batch
    batch_file <- file.path(data_dir, sprintf("trees_batch_%03d.geojson", batch))
    
    # Download only if file doesn't exist
    if (!file.exists(batch_file)) {
      message(sprintf("Downloading batch %d (offset: %d)...", batch, offset))
      
      # Build request with httr2
      response <- request(base_url) |>
        req_url_query(`$limit` = limit, `$offset` = offset) |>
        req_perform()
      
      # Save response to file
      writeBin(resp_body_raw(response), batch_file)
      
      # Check if we got fewer results than limit (end of data)
      temp_data <- st_read(batch_file, quiet = TRUE)
      
      if (nrow(temp_data) < limit) {
        message(sprintf("Downloaded final batch with %d trees", nrow(temp_data)))
        all_files <- c(all_files, batch_file)
        break
      }
      
      Sys.sleep(0.5)  # Be polite to the API
    } else {
      message(sprintf("Using cached batch %d", batch))
    }
    
    all_files <- c(all_files, batch_file)
    offset <- offset + limit
    batch <- batch + 1
    
    # Safety check - stop after reasonable number of batches
    if (batch > 30) {
      message("Reached maximum batch limit")
      break
    }
  }
  
  # Read and combine all batches
  message("Reading and combining all tree data...")
  tree_data <- map_dfr(all_files, ~st_read(.x, quiet = TRUE))
  
  message(sprintf("Total trees loaded: %s", 
                  format(nrow(tree_data), big.mark = ",")))
  
  return(tree_data)
}

# Download and load tree points
trees <- download_tree_points()

# Preview the data
glimpse(trees)
```

## Data Integration and Initial Exploration

### Task 3: Plot All Tree Points

```{r task3-map, fig.width=12, fig.height=10, warning=FALSE}
# Create comprehensive map of all trees
ggplot() +
  geom_sf(data = districts, fill = "gray95", color = "gray40", linewidth = 0.5) +
  geom_sf(data = trees, color = "darkgreen", alpha = 0.15, size = 0.1) +
  labs(
    title = "NYC Urban Forest: Distribution of ~900,000 Trees",
    subtitle = "Trees shown as points overlaid on City Council Districts",
    caption = "Data: NYC OpenData | Each point represents one street tree"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16, face = "bold"),
    plot.subtitle = element_text(size = 12),
    axis.text = element_blank(),
    axis.ticks = element_blank(),
    panel.grid = element_blank()
  )
```

### Task 4: District-Level Analysis

```{r task4-join}
# Perform spatial join
trees_with_districts <- st_join(trees, districts, join = st_intersects)

# Add borough classification
trees_with_districts <- trees_with_districts |>
  mutate(
    coun_dist = as.numeric(coun_dist),
    borough = case_when(
      coun_dist >= 1 & coun_dist <= 10 ~ "Manhattan",
      coun_dist >= 11 & coun_dist <= 18 ~ "Bronx",
      coun_dist >= 19 & coun_dist <= 32 ~ "Queens",
      coun_dist >= 33 & coun_dist <= 47 ~ "Brooklyn",
      coun_dist >= 48 & coun_dist <= 51 ~ "Staten Island",
      TRUE ~ "Unknown"
    )
  )
```

#### Which council district has the most trees?

```{r task4-most-trees}
district_counts <- trees_with_districts |>
  st_drop_geometry() |>
  count(coun_dist, borough, sort = TRUE)

most_trees <- district_counts |> slice(1)

cat(sprintf("District %d (%s) has the most trees with %s trees\n",
            most_trees$coun_dist,
            most_trees$borough,
            format(most_trees$n, big.mark = ",")))

# Visualization
district_counts |>
  slice_head(n = 10) |>
  ggplot(aes(x = reorder(paste("District", coun_dist), n), y = n, fill = borough)) +
  geom_col() +
  coord_flip() +
  scale_y_continuous(labels = comma) +
  labs(
    title = "Top 10 Districts by Tree Count",
    x = NULL,
    y = "Number of Trees",
    fill = "Borough"
  ) +
  theme_minimal()
```

#### Which district has the highest tree density?

```{r task4-density}
district_density <- trees_with_districts |>
  st_drop_geometry() |>
  count(coun_dist, borough) |>
  left_join(
    districts |> 
      st_drop_geometry() |>
      select(coun_dist, shape_area),
    by = "coun_dist"
  ) |>
  mutate(
    density = n / shape_area * 1e6  # Trees per million square units
  ) |>
  arrange(desc(density))

highest_density <- district_density |> slice(1)

cat(sprintf("District %d (%s) has the highest density with %.2f trees per unit area\n",
            highest_density$coun_dist,
            highest_density$borough,
            highest_density$density))

# Visualization
district_density |>
  slice_head(n = 10) |>
  ggplot(aes(x = reorder(paste("District", coun_dist), density), 
             y = density, fill = borough)) +
  geom_col() +
  coord_flip() +
  labs(
    title = "Top 10 Districts by Tree Density",
    x = NULL,
    y = "Trees per Unit Area (×10⁶)",
    fill = "Borough"
  ) +
  theme_minimal()
```

#### Which district has the highest fraction of dead trees?

```{r task4-dead-trees}
dead_tree_analysis <- trees_with_districts |>
  st_drop_geometry() |>
  group_by(coun_dist, borough) |>
  summarize(
    total = n(),
    dead = sum(status == "Dead", na.rm = TRUE),
    pct_dead = dead / total * 100,
    .groups = "drop"
  ) |>
  arrange(desc(pct_dead))

highest_dead <- dead_tree_analysis |> slice(1)

cat(sprintf("District %d (%s) has the highest fraction of dead trees at %.2f%%\n",
            highest_dead$coun_dist,
            highest_dead$borough,
            highest_dead$pct_dead))

# Visualization
dead_tree_analysis |>
  filter(total > 100) |>  # Filter out districts with very few trees
  slice_head(n = 10) |>
  ggplot(aes(x = reorder(paste("District", coun_dist), pct_dead), 
             y = pct_dead, fill = borough)) +
  geom_col() +
  coord_flip() +
  labs(
    title = "Districts with Highest Percentage of Dead Trees",
    subtitle = "Only districts with >100 trees shown",
    x = NULL,
    y = "Percentage of Dead Trees",
    fill = "Borough"
  ) +
  theme_minimal()
```

#### Most common tree species in Manhattan

```{r task4-manhattan-species}
manhattan_species <- trees_with_districts |>
  st_drop_geometry() |>
  filter(borough == "Manhattan") |>
  count(spc_common, sort = TRUE) |>
  slice_head(n = 10)

cat(sprintf("The most common tree species in Manhattan is '%s' with %s trees\n",
            manhattan_species$spc_common[1],
            format(manhattan_species$n[1], big.mark = ",")))

# Visualization
manhattan_species |>
  ggplot(aes(x = reorder(spc_common, n), y = n)) +
  geom_col(fill = "forestgreen") +
  coord_flip() +
  scale_y_continuous(labels = comma) +
  labs(
    title = "Top 10 Tree Species in Manhattan",
    x = NULL,
    y = "Number of Trees"
  ) +
  theme_minimal()
```

#### Tree species closest to Baruch campus

```{r task4-baruch}
# Helper function to create point
new_st_point <- function(lon, lat) {
  st_sfc(st_point(c(lon, lat))) |>
    st_set_crs("WGS84")
}

# Baruch College coordinates (Lexington Ave & E 24th St)
baruch_point <- new_st_point(-73.9838, 40.7401)

# Find closest tree
trees_with_distance <- trees |>
  mutate(distance = as.numeric(st_distance(geometry, baruch_point)))

closest_tree <- trees_with_distance |>
  st_drop_geometry() |>
  slice_min(distance, n = 1)

cat(sprintf("The closest tree to Baruch is a '%s' located %.2f meters away\n",
            closest_tree$spc_common,
            closest_tree$distance))

# Visualization - map of trees near Baruch
nearby_trees <- trees_with_distance |>
  filter(distance < 500)  # Within 500 meters

ggplot() +
  geom_sf(data = nearby_trees, aes(color = distance), size = 2, alpha = 0.6) +
  geom_sf(data = st_sf(geometry = baruch_point), 
          color = "red", size = 5, shape = 17) +
  scale_color_viridis_c(option = "viridis") +
  labs(
    title = "Trees within 500m of Baruch College",
    subtitle = "Red triangle marks Baruch campus location",
    color = "Distance (m)"
  ) +
  theme_minimal()
```

## Task 5: NYC Parks Proposal

### Proposal: Green Equity Initiative for District 19 (Queens)

**Executive Summary**

I propose a comprehensive tree planting and maintenance program for Council District 19 in Queens. This district currently has one of the lowest tree densities in the city despite having adequate space for expansion. Our initiative will plant 5,000 new trees over the next two years, focusing on underserved neighborhoods to improve air quality, reduce urban heat islands, and enhance quality of life for residents.

```{r task5-analysis}
# Select district for proposal (District 19 - Queens)
target_district <- 19
target_district_name <- "District 19 (Queens)"

# Get data for target district and comparison districts
comparison_districts <- c(19, 20, 25, 26)

district_comparison <- trees_with_districts |>
  st_drop_geometry() |>
  filter(coun_dist %in% comparison_districts) |>
  count(coun_dist, borough) |>
  left_join(
    districts |> 
      st_drop_geometry() |>
      select(coun_dist, shape_area),
    by = "coun_dist"
  ) |>
  mutate(
    density = n / shape_area * 1e6,
    district_label = paste("District", coun_dist)
  )
```

**Quantitative Scope**

- Plant 5,000 new trees across underserved areas
- Replace 300 dead or dying trees
- Focus on climate-resilient species (London Plane, Red Oak, Ginkgo)
- Target completion: 24 months

**District Comparison: Why District 19?**

```{r task5-comparison-viz}
# Comparison bar chart
ggplot(district_comparison, 
       aes(x = reorder(district_label, density), y = density, 
           fill = coun_dist == target_district)) +
  geom_col() +
  coord_flip() +
  scale_fill_manual(values = c("gray70", "darkgreen"), guide = "none") +
  labs(
    title = "Tree Density Comparison: District 19 vs Neighboring Districts",
    subtitle = "District 19 (highlighted) has significantly lower density",
    x = NULL,
    y = "Trees per Unit Area (×10⁶)"
  ) +
  theme_minimal() +
  theme(plot.title = element_text(face = "bold"))
```

**Key Findings:**

```{r task5-findings}
target_stats <- district_comparison |> filter(coun_dist == target_district)
avg_comparison <- district_comparison |> 
  filter(coun_dist != target_district) |> 
  summarize(avg_density = mean(density))

cat(sprintf("• District 19 has %s trees with a density of %.2f\n",
            format(target_stats$n, big.mark = ","),
            target_stats$density))
cat(sprintf("• This is %.1f%% below the average of comparison districts (%.2f)\n",
            (1 - target_stats$density / avg_comparison$avg_density) * 100,
            avg_comparison$avg_density))
```

**Zoomed Map: District 19 Current Tree Coverage**

```{r task5-zoomed-map, fig.width=10, fig.height=8}
# Get district 19 boundary and trees
district_19 <- districts |> filter(coun_dist == target_district)
trees_19 <- trees_with_districts |> filter(coun_dist == target_district)

ggplot() +
  geom_sf(data = district_19, fill = "gray98", color = "gray30", linewidth = 1) +
  geom_sf(data = trees_19, aes(color = status), alpha = 0.6, size = 0.8) +
  scale_color_manual(
    values = c("Alive" = "darkgreen", "Dead" = "red", "Stump" = "brown"),
    na.value = "gray50"
  ) +
  labs(
    title = "Current Tree Distribution in District 19",
    subtitle = "Visible gaps in coverage indicate opportunity for new plantings",
    color = "Tree Status"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 14, face = "bold"),
    axis.text = element_blank(),
    panel.grid = element_blank()
  )
```

**Species Diversity Analysis**

```{r task5-species-viz}
# Species composition comparison
species_comparison <- trees_with_districts |>
  st_drop_geometry() |>
  filter(coun_dist %in% comparison_districts) |>
  count(coun_dist, spc_common, sort = TRUE) |>
  group_by(coun_dist) |>
  slice_head(n = 5) |>
  ungroup()

species_comparison |>
  filter(coun_dist == target_district) |>
  ggplot(aes(x = reorder(spc_common, n), y = n)) +
  geom_col(fill = "forestgreen") +
  coord_flip() +
  scale_y_continuous(labels = comma) +
  labs(
    title = "Top 5 Tree Species in District 19",
    subtitle = "Limited diversity suggests opportunity for strategic planting",
    x = NULL,
    y = "Number of Trees"
  ) +
  theme_minimal()
```

**Recommendation**

This initiative will address environmental justice concerns by expanding tree coverage in District 19, which currently lags behind neighboring districts. The program will prioritize heat-vulnerable areas, improve air quality, and create more livable streetscapes for over 150,000 residents.

## Extra Credit: Animated Visualization

```{r extra-credit-animated, fig.width=12, fig.height=10}
# Create animated visualization showing tree distribution by borough
borough_animation_data <- trees_with_districts |>
  st_drop_geometry() |>
  filter(!is.na(borough)) |>
  count(borough, spc_common) |>
  group_by(borough) |>
  slice_max(n, n = 10) |>
  ungroup()

p_anim <- borough_animation_data |>
  ggplot(aes(x = reorder(spc_common, n), y = n, fill = spc_common)) +
  geom_col(show.legend = FALSE) +
  coord_flip() +
  scale_y_continuous(labels = comma) +
  labs(
    title = "Top 10 Tree Species in {closest_state}",
    x = NULL,
    y = "Number of Trees"
  ) +
  theme_minimal() +
  theme(plot.title = element_text(size = 16, face = "bold")) +
  transition_states(borough, transition_length = 2, state_length = 3)

# Save animation
anim_save("trees_by_borough.gif", p_anim, width = 800, height = 600)

cat("Animation saved as 'trees_by_borough.gif'\n")
```

## Extra Credit: Interactive Visualization

```{r extra-credit-interactive}
# Create interactive map using plotly
district_summary <- trees_with_districts |>
  st_drop_geometry() |>
  count(coun_dist, borough) |>
  left_join(
    districts |> st_drop_geometry() |> select(coun_dist, shape_area),
    by = "coun_dist"
  ) |>
  mutate(density = n / shape_area * 1e6)

# Merge summary back to districts for plotting
districts_with_data <- districts |>
  left_join(district_summary, by = "coun_dist")

# Create interactive choropleth
fig <- districts_with_data |>
  plot_ly() |>
  add_sf(
    color = ~n,
    colors = "Greens",
    text = ~paste("District:", coun_dist, "<br>",
                  "Borough:", borough, "<br>",
                  "Trees:", format(n, big.mark = ","), "<br>",
                  "Density:", round(density, 2)),
    hoverinfo = "text"
  ) |>
  layout(
    title = "Interactive NYC Tree Distribution by Council District",
    margin = list(l = 0, r = 0, t = 40, b = 0)
  )

fig
```

## Conclusion

This analysis reveals significant disparities in tree coverage across NYC's council districts. District 19 in Queens presents a compelling case for targeted investment, with below-average tree density and ample opportunity for strategic planting. The proposed Green Equity Initiative would plant 5,000 new trees, addressing environmental justice concerns while enhancing livability for thousands of residents. Through data-driven analysis and spatial visualization, we've identified both the need and the opportunity to expand NYC's urban canopy where it's needed most.

## Session Info

```{r session-info}
sessionInfo()
```